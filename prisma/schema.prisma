generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  shops         Shop[]    @relation("UserShops")
  reviews       Review[]  @relation("UserReviews")
  
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Shop {
  id           String    @id @default(cuid())
  name         String
  type         String   
  speciality    String
  priceRange   String    
  location     String?
  latitude     Float?
  longitude    Float?
  description  String?
  addedBy      User      @relation("UserShops", fields: [addedById], references: [id])
  addedById    String
  reviews      Review[]  @relation("ShopReviews")
  image       String?   // URL to the image
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String
  shop      Shop     @relation("ShopReviews", fields: [shopId], references: [id])
  shopId    String
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
